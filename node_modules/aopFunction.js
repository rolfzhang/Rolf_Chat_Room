
var aopFunction = function(orig,before,after){
    var AopFunction = function(){
        var args,result;
        if(before && typeof before == 'function'){
            //可修改传入参数
            args = before.apply(this,arguments);
            //如果返回false, 则停止执行
            if(args===false){
                return false;
            }
        }
        //如果before返回一个数组，则用来替换原有参数
        args = _.isArray(args)?args:arguments;
        //调用原方法
        result = orig.apply(this,args);
        if(after && typeof after == 'function'){
            Array.prototype.unshift.call(args,result);
            //可修改返回结果
            result = after.apply(this,args) || result;
        }
        return result;
    }
    for(var i in orig){
        if(orig.hasOwnProperty(i)){
            AopFunction[i] = orig[i];
        }
    }
    AopFunction.originalFunction = orig;
    AopFunction.prototype = orig.prototype;
    return AopFunction;
}

if(typeof exports !== 'undefined' &&
    typeof module !== 'undefined' && 
    module.exports){
        exports = module.exports = aopFunction;
    }